// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReqSubSystemInfo.proto

#ifndef PROTOBUF_ReqSubSystemInfo_2eproto__INCLUDED
#define PROTOBUF_ReqSubSystemInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "basehead.pb.h"
// @@protoc_insertion_point(includes)

namespace machine {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ReqSubSystemInfo_2eproto();
void protobuf_AssignDesc_ReqSubSystemInfo_2eproto();
void protobuf_ShutdownFile_ReqSubSystemInfo_2eproto();

class ReqSubSystemInfo;
class RspSubSystemInfo;
class MachineSystemInfo;

// ===================================================================

class ReqSubSystemInfo : public ::google::protobuf::Message {
 public:
  ReqSubSystemInfo();
  virtual ~ReqSubSystemInfo();

  ReqSubSystemInfo(const ReqSubSystemInfo& from);

  inline ReqSubSystemInfo& operator=(const ReqSubSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSubSystemInfo& default_instance();

  void Swap(ReqSubSystemInfo* other);

  // implements Message ----------------------------------------------

  ReqSubSystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSubSystemInfo& from);
  void MergeFrom(const ReqSubSystemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .machine.MachineHead machine = 1;
  inline bool has_machine() const;
  inline void clear_machine();
  static const int kMachineFieldNumber = 1;
  inline const ::machine::MachineHead& machine() const;
  inline ::machine::MachineHead* mutable_machine();
  inline ::machine::MachineHead* release_machine();
  inline void set_allocated_machine(::machine::MachineHead* machine);

  // required int32 bIsSub = 2;
  inline bool has_bissub() const;
  inline void clear_bissub();
  static const int kBIsSubFieldNumber = 2;
  inline ::google::protobuf::int32 bissub() const;
  inline void set_bissub(::google::protobuf::int32 value);

  // required string userID = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:machine.ReqSubSystemInfo)
 private:
  inline void set_has_machine();
  inline void clear_has_machine();
  inline void set_has_bissub();
  inline void clear_has_bissub();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::machine::MachineHead* machine_;
  ::std::string* userid_;
  ::google::protobuf::int32 bissub_;
  friend void  protobuf_AddDesc_ReqSubSystemInfo_2eproto();
  friend void protobuf_AssignDesc_ReqSubSystemInfo_2eproto();
  friend void protobuf_ShutdownFile_ReqSubSystemInfo_2eproto();

  void InitAsDefaultInstance();
  static ReqSubSystemInfo* default_instance_;
};
// -------------------------------------------------------------------

class RspSubSystemInfo : public ::google::protobuf::Message {
 public:
  RspSubSystemInfo();
  virtual ~RspSubSystemInfo();

  RspSubSystemInfo(const RspSubSystemInfo& from);

  inline RspSubSystemInfo& operator=(const RspSubSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspSubSystemInfo& default_instance();

  void Swap(RspSubSystemInfo* other);

  // implements Message ----------------------------------------------

  RspSubSystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspSubSystemInfo& from);
  void MergeFrom(const RspSubSystemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .machine.MachineHead machine = 1;
  inline bool has_machine() const;
  inline void clear_machine();
  static const int kMachineFieldNumber = 1;
  inline const ::machine::MachineHead& machine() const;
  inline ::machine::MachineHead* mutable_machine();
  inline ::machine::MachineHead* release_machine();
  inline void set_allocated_machine(::machine::MachineHead* machine);

  // required int32 bIsSub = 2;
  inline bool has_bissub() const;
  inline void clear_bissub();
  static const int kBIsSubFieldNumber = 2;
  inline ::google::protobuf::int32 bissub() const;
  inline void set_bissub(::google::protobuf::int32 value);

  // required string userID = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:machine.RspSubSystemInfo)
 private:
  inline void set_has_machine();
  inline void clear_has_machine();
  inline void set_has_bissub();
  inline void clear_has_bissub();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::machine::MachineHead* machine_;
  ::std::string* userid_;
  ::google::protobuf::int32 bissub_;
  friend void  protobuf_AddDesc_ReqSubSystemInfo_2eproto();
  friend void protobuf_AssignDesc_ReqSubSystemInfo_2eproto();
  friend void protobuf_ShutdownFile_ReqSubSystemInfo_2eproto();

  void InitAsDefaultInstance();
  static RspSubSystemInfo* default_instance_;
};
// -------------------------------------------------------------------

class MachineSystemInfo : public ::google::protobuf::Message {
 public:
  MachineSystemInfo();
  virtual ~MachineSystemInfo();

  MachineSystemInfo(const MachineSystemInfo& from);

  inline MachineSystemInfo& operator=(const MachineSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineSystemInfo& default_instance();

  void Swap(MachineSystemInfo* other);

  // implements Message ----------------------------------------------

  MachineSystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineSystemInfo& from);
  void MergeFrom(const MachineSystemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .machine.MachineHead machine = 1;
  inline bool has_machine() const;
  inline void clear_machine();
  static const int kMachineFieldNumber = 1;
  inline const ::machine::MachineHead& machine() const;
  inline ::machine::MachineHead* mutable_machine();
  inline ::machine::MachineHead* release_machine();
  inline void set_allocated_machine(::machine::MachineHead* machine);

  // optional double dCpuPercent = 2;
  inline bool has_dcpupercent() const;
  inline void clear_dcpupercent();
  static const int kDCpuPercentFieldNumber = 2;
  inline double dcpupercent() const;
  inline void set_dcpupercent(double value);

  // optional double dUseMemory = 3;
  inline bool has_dusememory() const;
  inline void clear_dusememory();
  static const int kDUseMemoryFieldNumber = 3;
  inline double dusememory() const;
  inline void set_dusememory(double value);

  // optional double dTotalMemory = 4;
  inline bool has_dtotalmemory() const;
  inline void clear_dtotalmemory();
  static const int kDTotalMemoryFieldNumber = 4;
  inline double dtotalmemory() const;
  inline void set_dtotalmemory(double value);

  // optional string tickTime = 5;
  inline bool has_ticktime() const;
  inline void clear_ticktime();
  static const int kTickTimeFieldNumber = 5;
  inline const ::std::string& ticktime() const;
  inline void set_ticktime(const ::std::string& value);
  inline void set_ticktime(const char* value);
  inline void set_ticktime(const char* value, size_t size);
  inline ::std::string* mutable_ticktime();
  inline ::std::string* release_ticktime();
  inline void set_allocated_ticktime(::std::string* ticktime);

  // @@protoc_insertion_point(class_scope:machine.MachineSystemInfo)
 private:
  inline void set_has_machine();
  inline void clear_has_machine();
  inline void set_has_dcpupercent();
  inline void clear_has_dcpupercent();
  inline void set_has_dusememory();
  inline void clear_has_dusememory();
  inline void set_has_dtotalmemory();
  inline void clear_has_dtotalmemory();
  inline void set_has_ticktime();
  inline void clear_has_ticktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::machine::MachineHead* machine_;
  double dcpupercent_;
  double dusememory_;
  double dtotalmemory_;
  ::std::string* ticktime_;
  friend void  protobuf_AddDesc_ReqSubSystemInfo_2eproto();
  friend void protobuf_AssignDesc_ReqSubSystemInfo_2eproto();
  friend void protobuf_ShutdownFile_ReqSubSystemInfo_2eproto();

  void InitAsDefaultInstance();
  static MachineSystemInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqSubSystemInfo

// required .machine.MachineHead machine = 1;
inline bool ReqSubSystemInfo::has_machine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSubSystemInfo::set_has_machine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSubSystemInfo::clear_has_machine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSubSystemInfo::clear_machine() {
  if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
  clear_has_machine();
}
inline const ::machine::MachineHead& ReqSubSystemInfo::machine() const {
  // @@protoc_insertion_point(field_get:machine.ReqSubSystemInfo.machine)
  return machine_ != NULL ? *machine_ : *default_instance_->machine_;
}
inline ::machine::MachineHead* ReqSubSystemInfo::mutable_machine() {
  set_has_machine();
  if (machine_ == NULL) machine_ = new ::machine::MachineHead;
  // @@protoc_insertion_point(field_mutable:machine.ReqSubSystemInfo.machine)
  return machine_;
}
inline ::machine::MachineHead* ReqSubSystemInfo::release_machine() {
  clear_has_machine();
  ::machine::MachineHead* temp = machine_;
  machine_ = NULL;
  return temp;
}
inline void ReqSubSystemInfo::set_allocated_machine(::machine::MachineHead* machine) {
  delete machine_;
  machine_ = machine;
  if (machine) {
    set_has_machine();
  } else {
    clear_has_machine();
  }
  // @@protoc_insertion_point(field_set_allocated:machine.ReqSubSystemInfo.machine)
}

// required int32 bIsSub = 2;
inline bool ReqSubSystemInfo::has_bissub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSubSystemInfo::set_has_bissub() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSubSystemInfo::clear_has_bissub() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSubSystemInfo::clear_bissub() {
  bissub_ = 0;
  clear_has_bissub();
}
inline ::google::protobuf::int32 ReqSubSystemInfo::bissub() const {
  // @@protoc_insertion_point(field_get:machine.ReqSubSystemInfo.bIsSub)
  return bissub_;
}
inline void ReqSubSystemInfo::set_bissub(::google::protobuf::int32 value) {
  set_has_bissub();
  bissub_ = value;
  // @@protoc_insertion_point(field_set:machine.ReqSubSystemInfo.bIsSub)
}

// required string userID = 3;
inline bool ReqSubSystemInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSubSystemInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSubSystemInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSubSystemInfo::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& ReqSubSystemInfo::userid() const {
  // @@protoc_insertion_point(field_get:machine.ReqSubSystemInfo.userID)
  return *userid_;
}
inline void ReqSubSystemInfo::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:machine.ReqSubSystemInfo.userID)
}
inline void ReqSubSystemInfo::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:machine.ReqSubSystemInfo.userID)
}
inline void ReqSubSystemInfo::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machine.ReqSubSystemInfo.userID)
}
inline ::std::string* ReqSubSystemInfo::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machine.ReqSubSystemInfo.userID)
  return userid_;
}
inline ::std::string* ReqSubSystemInfo::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqSubSystemInfo::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machine.ReqSubSystemInfo.userID)
}

// -------------------------------------------------------------------

// RspSubSystemInfo

// required .machine.MachineHead machine = 1;
inline bool RspSubSystemInfo::has_machine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RspSubSystemInfo::set_has_machine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RspSubSystemInfo::clear_has_machine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RspSubSystemInfo::clear_machine() {
  if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
  clear_has_machine();
}
inline const ::machine::MachineHead& RspSubSystemInfo::machine() const {
  // @@protoc_insertion_point(field_get:machine.RspSubSystemInfo.machine)
  return machine_ != NULL ? *machine_ : *default_instance_->machine_;
}
inline ::machine::MachineHead* RspSubSystemInfo::mutable_machine() {
  set_has_machine();
  if (machine_ == NULL) machine_ = new ::machine::MachineHead;
  // @@protoc_insertion_point(field_mutable:machine.RspSubSystemInfo.machine)
  return machine_;
}
inline ::machine::MachineHead* RspSubSystemInfo::release_machine() {
  clear_has_machine();
  ::machine::MachineHead* temp = machine_;
  machine_ = NULL;
  return temp;
}
inline void RspSubSystemInfo::set_allocated_machine(::machine::MachineHead* machine) {
  delete machine_;
  machine_ = machine;
  if (machine) {
    set_has_machine();
  } else {
    clear_has_machine();
  }
  // @@protoc_insertion_point(field_set_allocated:machine.RspSubSystemInfo.machine)
}

// required int32 bIsSub = 2;
inline bool RspSubSystemInfo::has_bissub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RspSubSystemInfo::set_has_bissub() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RspSubSystemInfo::clear_has_bissub() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RspSubSystemInfo::clear_bissub() {
  bissub_ = 0;
  clear_has_bissub();
}
inline ::google::protobuf::int32 RspSubSystemInfo::bissub() const {
  // @@protoc_insertion_point(field_get:machine.RspSubSystemInfo.bIsSub)
  return bissub_;
}
inline void RspSubSystemInfo::set_bissub(::google::protobuf::int32 value) {
  set_has_bissub();
  bissub_ = value;
  // @@protoc_insertion_point(field_set:machine.RspSubSystemInfo.bIsSub)
}

// required string userID = 3;
inline bool RspSubSystemInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RspSubSystemInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RspSubSystemInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RspSubSystemInfo::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& RspSubSystemInfo::userid() const {
  // @@protoc_insertion_point(field_get:machine.RspSubSystemInfo.userID)
  return *userid_;
}
inline void RspSubSystemInfo::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:machine.RspSubSystemInfo.userID)
}
inline void RspSubSystemInfo::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:machine.RspSubSystemInfo.userID)
}
inline void RspSubSystemInfo::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machine.RspSubSystemInfo.userID)
}
inline ::std::string* RspSubSystemInfo::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machine.RspSubSystemInfo.userID)
  return userid_;
}
inline ::std::string* RspSubSystemInfo::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RspSubSystemInfo::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machine.RspSubSystemInfo.userID)
}

// -------------------------------------------------------------------

// MachineSystemInfo

// required .machine.MachineHead machine = 1;
inline bool MachineSystemInfo::has_machine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineSystemInfo::set_has_machine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineSystemInfo::clear_has_machine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineSystemInfo::clear_machine() {
  if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
  clear_has_machine();
}
inline const ::machine::MachineHead& MachineSystemInfo::machine() const {
  // @@protoc_insertion_point(field_get:machine.MachineSystemInfo.machine)
  return machine_ != NULL ? *machine_ : *default_instance_->machine_;
}
inline ::machine::MachineHead* MachineSystemInfo::mutable_machine() {
  set_has_machine();
  if (machine_ == NULL) machine_ = new ::machine::MachineHead;
  // @@protoc_insertion_point(field_mutable:machine.MachineSystemInfo.machine)
  return machine_;
}
inline ::machine::MachineHead* MachineSystemInfo::release_machine() {
  clear_has_machine();
  ::machine::MachineHead* temp = machine_;
  machine_ = NULL;
  return temp;
}
inline void MachineSystemInfo::set_allocated_machine(::machine::MachineHead* machine) {
  delete machine_;
  machine_ = machine;
  if (machine) {
    set_has_machine();
  } else {
    clear_has_machine();
  }
  // @@protoc_insertion_point(field_set_allocated:machine.MachineSystemInfo.machine)
}

// optional double dCpuPercent = 2;
inline bool MachineSystemInfo::has_dcpupercent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineSystemInfo::set_has_dcpupercent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineSystemInfo::clear_has_dcpupercent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineSystemInfo::clear_dcpupercent() {
  dcpupercent_ = 0;
  clear_has_dcpupercent();
}
inline double MachineSystemInfo::dcpupercent() const {
  // @@protoc_insertion_point(field_get:machine.MachineSystemInfo.dCpuPercent)
  return dcpupercent_;
}
inline void MachineSystemInfo::set_dcpupercent(double value) {
  set_has_dcpupercent();
  dcpupercent_ = value;
  // @@protoc_insertion_point(field_set:machine.MachineSystemInfo.dCpuPercent)
}

// optional double dUseMemory = 3;
inline bool MachineSystemInfo::has_dusememory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MachineSystemInfo::set_has_dusememory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MachineSystemInfo::clear_has_dusememory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MachineSystemInfo::clear_dusememory() {
  dusememory_ = 0;
  clear_has_dusememory();
}
inline double MachineSystemInfo::dusememory() const {
  // @@protoc_insertion_point(field_get:machine.MachineSystemInfo.dUseMemory)
  return dusememory_;
}
inline void MachineSystemInfo::set_dusememory(double value) {
  set_has_dusememory();
  dusememory_ = value;
  // @@protoc_insertion_point(field_set:machine.MachineSystemInfo.dUseMemory)
}

// optional double dTotalMemory = 4;
inline bool MachineSystemInfo::has_dtotalmemory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MachineSystemInfo::set_has_dtotalmemory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MachineSystemInfo::clear_has_dtotalmemory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MachineSystemInfo::clear_dtotalmemory() {
  dtotalmemory_ = 0;
  clear_has_dtotalmemory();
}
inline double MachineSystemInfo::dtotalmemory() const {
  // @@protoc_insertion_point(field_get:machine.MachineSystemInfo.dTotalMemory)
  return dtotalmemory_;
}
inline void MachineSystemInfo::set_dtotalmemory(double value) {
  set_has_dtotalmemory();
  dtotalmemory_ = value;
  // @@protoc_insertion_point(field_set:machine.MachineSystemInfo.dTotalMemory)
}

// optional string tickTime = 5;
inline bool MachineSystemInfo::has_ticktime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MachineSystemInfo::set_has_ticktime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MachineSystemInfo::clear_has_ticktime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MachineSystemInfo::clear_ticktime() {
  if (ticktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_->clear();
  }
  clear_has_ticktime();
}
inline const ::std::string& MachineSystemInfo::ticktime() const {
  // @@protoc_insertion_point(field_get:machine.MachineSystemInfo.tickTime)
  return *ticktime_;
}
inline void MachineSystemInfo::set_ticktime(const ::std::string& value) {
  set_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_ = new ::std::string;
  }
  ticktime_->assign(value);
  // @@protoc_insertion_point(field_set:machine.MachineSystemInfo.tickTime)
}
inline void MachineSystemInfo::set_ticktime(const char* value) {
  set_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_ = new ::std::string;
  }
  ticktime_->assign(value);
  // @@protoc_insertion_point(field_set_char:machine.MachineSystemInfo.tickTime)
}
inline void MachineSystemInfo::set_ticktime(const char* value, size_t size) {
  set_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_ = new ::std::string;
  }
  ticktime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machine.MachineSystemInfo.tickTime)
}
inline ::std::string* MachineSystemInfo::mutable_ticktime() {
  set_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machine.MachineSystemInfo.tickTime)
  return ticktime_;
}
inline ::std::string* MachineSystemInfo::release_ticktime() {
  clear_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ticktime_;
    ticktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MachineSystemInfo::set_allocated_ticktime(::std::string* ticktime) {
  if (ticktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ticktime_;
  }
  if (ticktime) {
    set_has_ticktime();
    ticktime_ = ticktime;
  } else {
    clear_has_ticktime();
    ticktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machine.MachineSystemInfo.tickTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace machine

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ReqSubSystemInfo_2eproto__INCLUDED
