// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReqSubSystemInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ReqSubSystemInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace machine {

namespace {

const ::google::protobuf::Descriptor* ReqSubSystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSubSystemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspSubSystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspSubSystemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineSystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineSystemInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ReqSubSystemInfo_2eproto() {
  protobuf_AddDesc_ReqSubSystemInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ReqSubSystemInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ReqSubSystemInfo_descriptor_ = file->message_type(0);
  static const int ReqSubSystemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubSystemInfo, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubSystemInfo, bissub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubSystemInfo, userid_),
  };
  ReqSubSystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSubSystemInfo_descriptor_,
      ReqSubSystemInfo::default_instance_,
      ReqSubSystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubSystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubSystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSubSystemInfo));
  RspSubSystemInfo_descriptor_ = file->message_type(1);
  static const int RspSubSystemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubSystemInfo, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubSystemInfo, bissub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubSystemInfo, userid_),
  };
  RspSubSystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspSubSystemInfo_descriptor_,
      RspSubSystemInfo::default_instance_,
      RspSubSystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubSystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubSystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspSubSystemInfo));
  MachineSystemInfo_descriptor_ = file->message_type(2);
  static const int MachineSystemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineSystemInfo, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineSystemInfo, dcpupercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineSystemInfo, dusememory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineSystemInfo, dtotalmemory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineSystemInfo, ticktime_),
  };
  MachineSystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineSystemInfo_descriptor_,
      MachineSystemInfo::default_instance_,
      MachineSystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineSystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineSystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineSystemInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ReqSubSystemInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSubSystemInfo_descriptor_, &ReqSubSystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspSubSystemInfo_descriptor_, &RspSubSystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineSystemInfo_descriptor_, &MachineSystemInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ReqSubSystemInfo_2eproto() {
  delete ReqSubSystemInfo::default_instance_;
  delete ReqSubSystemInfo_reflection_;
  delete RspSubSystemInfo::default_instance_;
  delete RspSubSystemInfo_reflection_;
  delete MachineSystemInfo::default_instance_;
  delete MachineSystemInfo_reflection_;
}

void protobuf_AddDesc_ReqSubSystemInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::machine::protobuf_AddDesc_basehead_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ReqSubSystemInfo.proto\022\007machine\032\016baseh"
    "ead.proto\"Y\n\020ReqSubSystemInfo\022%\n\007machine"
    "\030\001 \002(\0132\024.machine.MachineHead\022\016\n\006bIsSub\030\002"
    " \002(\005\022\016\n\006userID\030\003 \002(\t\"Y\n\020RspSubSystemInfo"
    "\022%\n\007machine\030\001 \002(\0132\024.machine.MachineHead\022"
    "\016\n\006bIsSub\030\002 \002(\005\022\016\n\006userID\030\003 \002(\t\"\213\001\n\021Mach"
    "ineSystemInfo\022%\n\007machine\030\001 \002(\0132\024.machine"
    ".MachineHead\022\023\n\013dCpuPercent\030\002 \001(\001\022\022\n\ndUs"
    "eMemory\030\003 \001(\001\022\024\n\014dTotalMemory\030\004 \001(\001\022\020\n\010t"
    "ickTime\030\005 \001(\t", 373);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ReqSubSystemInfo.proto", &protobuf_RegisterTypes);
  ReqSubSystemInfo::default_instance_ = new ReqSubSystemInfo();
  RspSubSystemInfo::default_instance_ = new RspSubSystemInfo();
  MachineSystemInfo::default_instance_ = new MachineSystemInfo();
  ReqSubSystemInfo::default_instance_->InitAsDefaultInstance();
  RspSubSystemInfo::default_instance_->InitAsDefaultInstance();
  MachineSystemInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ReqSubSystemInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ReqSubSystemInfo_2eproto {
  StaticDescriptorInitializer_ReqSubSystemInfo_2eproto() {
    protobuf_AddDesc_ReqSubSystemInfo_2eproto();
  }
} static_descriptor_initializer_ReqSubSystemInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqSubSystemInfo::kMachineFieldNumber;
const int ReqSubSystemInfo::kBIsSubFieldNumber;
const int ReqSubSystemInfo::kUserIDFieldNumber;
#endif  // !_MSC_VER

ReqSubSystemInfo::ReqSubSystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.ReqSubSystemInfo)
}

void ReqSubSystemInfo::InitAsDefaultInstance() {
  machine_ = const_cast< ::machine::MachineHead*>(&::machine::MachineHead::default_instance());
}

ReqSubSystemInfo::ReqSubSystemInfo(const ReqSubSystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:machine.ReqSubSystemInfo)
}

void ReqSubSystemInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  machine_ = NULL;
  bissub_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSubSystemInfo::~ReqSubSystemInfo() {
  // @@protoc_insertion_point(destructor:machine.ReqSubSystemInfo)
  SharedDtor();
}

void ReqSubSystemInfo::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete machine_;
  }
}

void ReqSubSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubSystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSubSystemInfo_descriptor_;
}

const ReqSubSystemInfo& ReqSubSystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReqSubSystemInfo_2eproto();
  return *default_instance_;
}

ReqSubSystemInfo* ReqSubSystemInfo::default_instance_ = NULL;

ReqSubSystemInfo* ReqSubSystemInfo::New() const {
  return new ReqSubSystemInfo;
}

void ReqSubSystemInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_machine()) {
      if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
    }
    bissub_ = 0;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSubSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.ReqSubSystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .machine.MachineHead machine = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bIsSub;
        break;
      }

      // required int32 bIsSub = 2;
      case 2: {
        if (tag == 16) {
         parse_bIsSub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bissub_)));
          set_has_bissub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // required string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.ReqSubSystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.ReqSubSystemInfo)
  return false;
#undef DO_
}

void ReqSubSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.ReqSubSystemInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machine(), output);
  }

  // required int32 bIsSub = 2;
  if (has_bissub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bissub(), output);
  }

  // required string userID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.ReqSubSystemInfo)
}

::google::protobuf::uint8* ReqSubSystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.ReqSubSystemInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machine(), target);
  }

  // required int32 bIsSub = 2;
  if (has_bissub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bissub(), target);
  }

  // required string userID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.ReqSubSystemInfo)
  return target;
}

int ReqSubSystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .machine.MachineHead machine = 1;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine());
    }

    // required int32 bIsSub = 2;
    if (has_bissub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bissub());
    }

    // required string userID = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSubSystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSubSystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSubSystemInfo::MergeFrom(const ReqSubSystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine()) {
      mutable_machine()->::machine::MachineHead::MergeFrom(from.machine());
    }
    if (from.has_bissub()) {
      set_bissub(from.bissub());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSubSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubSystemInfo::CopyFrom(const ReqSubSystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubSystemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_machine()) {
    if (!this->machine().IsInitialized()) return false;
  }
  return true;
}

void ReqSubSystemInfo::Swap(ReqSubSystemInfo* other) {
  if (other != this) {
    std::swap(machine_, other->machine_);
    std::swap(bissub_, other->bissub_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSubSystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSubSystemInfo_descriptor_;
  metadata.reflection = ReqSubSystemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspSubSystemInfo::kMachineFieldNumber;
const int RspSubSystemInfo::kBIsSubFieldNumber;
const int RspSubSystemInfo::kUserIDFieldNumber;
#endif  // !_MSC_VER

RspSubSystemInfo::RspSubSystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.RspSubSystemInfo)
}

void RspSubSystemInfo::InitAsDefaultInstance() {
  machine_ = const_cast< ::machine::MachineHead*>(&::machine::MachineHead::default_instance());
}

RspSubSystemInfo::RspSubSystemInfo(const RspSubSystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:machine.RspSubSystemInfo)
}

void RspSubSystemInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  machine_ = NULL;
  bissub_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspSubSystemInfo::~RspSubSystemInfo() {
  // @@protoc_insertion_point(destructor:machine.RspSubSystemInfo)
  SharedDtor();
}

void RspSubSystemInfo::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete machine_;
  }
}

void RspSubSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspSubSystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspSubSystemInfo_descriptor_;
}

const RspSubSystemInfo& RspSubSystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReqSubSystemInfo_2eproto();
  return *default_instance_;
}

RspSubSystemInfo* RspSubSystemInfo::default_instance_ = NULL;

RspSubSystemInfo* RspSubSystemInfo::New() const {
  return new RspSubSystemInfo;
}

void RspSubSystemInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_machine()) {
      if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
    }
    bissub_ = 0;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspSubSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.RspSubSystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .machine.MachineHead machine = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bIsSub;
        break;
      }

      // required int32 bIsSub = 2;
      case 2: {
        if (tag == 16) {
         parse_bIsSub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bissub_)));
          set_has_bissub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // required string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.RspSubSystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.RspSubSystemInfo)
  return false;
#undef DO_
}

void RspSubSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.RspSubSystemInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machine(), output);
  }

  // required int32 bIsSub = 2;
  if (has_bissub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bissub(), output);
  }

  // required string userID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.RspSubSystemInfo)
}

::google::protobuf::uint8* RspSubSystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.RspSubSystemInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machine(), target);
  }

  // required int32 bIsSub = 2;
  if (has_bissub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bissub(), target);
  }

  // required string userID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.RspSubSystemInfo)
  return target;
}

int RspSubSystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .machine.MachineHead machine = 1;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine());
    }

    // required int32 bIsSub = 2;
    if (has_bissub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bissub());
    }

    // required string userID = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspSubSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspSubSystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspSubSystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspSubSystemInfo::MergeFrom(const RspSubSystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine()) {
      mutable_machine()->::machine::MachineHead::MergeFrom(from.machine());
    }
    if (from.has_bissub()) {
      set_bissub(from.bissub());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspSubSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspSubSystemInfo::CopyFrom(const RspSubSystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspSubSystemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_machine()) {
    if (!this->machine().IsInitialized()) return false;
  }
  return true;
}

void RspSubSystemInfo::Swap(RspSubSystemInfo* other) {
  if (other != this) {
    std::swap(machine_, other->machine_);
    std::swap(bissub_, other->bissub_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspSubSystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspSubSystemInfo_descriptor_;
  metadata.reflection = RspSubSystemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MachineSystemInfo::kMachineFieldNumber;
const int MachineSystemInfo::kDCpuPercentFieldNumber;
const int MachineSystemInfo::kDUseMemoryFieldNumber;
const int MachineSystemInfo::kDTotalMemoryFieldNumber;
const int MachineSystemInfo::kTickTimeFieldNumber;
#endif  // !_MSC_VER

MachineSystemInfo::MachineSystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.MachineSystemInfo)
}

void MachineSystemInfo::InitAsDefaultInstance() {
  machine_ = const_cast< ::machine::MachineHead*>(&::machine::MachineHead::default_instance());
}

MachineSystemInfo::MachineSystemInfo(const MachineSystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:machine.MachineSystemInfo)
}

void MachineSystemInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  machine_ = NULL;
  dcpupercent_ = 0;
  dusememory_ = 0;
  dtotalmemory_ = 0;
  ticktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineSystemInfo::~MachineSystemInfo() {
  // @@protoc_insertion_point(destructor:machine.MachineSystemInfo)
  SharedDtor();
}

void MachineSystemInfo::SharedDtor() {
  if (ticktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ticktime_;
  }
  if (this != default_instance_) {
    delete machine_;
  }
}

void MachineSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineSystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineSystemInfo_descriptor_;
}

const MachineSystemInfo& MachineSystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReqSubSystemInfo_2eproto();
  return *default_instance_;
}

MachineSystemInfo* MachineSystemInfo::default_instance_ = NULL;

MachineSystemInfo* MachineSystemInfo::New() const {
  return new MachineSystemInfo;
}

void MachineSystemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MachineSystemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(dcpupercent_, dtotalmemory_);
    if (has_machine()) {
      if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
    }
    if (has_ticktime()) {
      if (ticktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ticktime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.MachineSystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .machine.MachineHead machine = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_dCpuPercent;
        break;
      }

      // optional double dCpuPercent = 2;
      case 2: {
        if (tag == 17) {
         parse_dCpuPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dcpupercent_)));
          set_has_dcpupercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_dUseMemory;
        break;
      }

      // optional double dUseMemory = 3;
      case 3: {
        if (tag == 25) {
         parse_dUseMemory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dusememory_)));
          set_has_dusememory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_dTotalMemory;
        break;
      }

      // optional double dTotalMemory = 4;
      case 4: {
        if (tag == 33) {
         parse_dTotalMemory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dtotalmemory_)));
          set_has_dtotalmemory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tickTime;
        break;
      }

      // optional string tickTime = 5;
      case 5: {
        if (tag == 42) {
         parse_tickTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticktime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticktime().data(), this->ticktime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ticktime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.MachineSystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.MachineSystemInfo)
  return false;
#undef DO_
}

void MachineSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.MachineSystemInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machine(), output);
  }

  // optional double dCpuPercent = 2;
  if (has_dcpupercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dcpupercent(), output);
  }

  // optional double dUseMemory = 3;
  if (has_dusememory()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dusememory(), output);
  }

  // optional double dTotalMemory = 4;
  if (has_dtotalmemory()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dtotalmemory(), output);
  }

  // optional string tickTime = 5;
  if (has_ticktime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticktime().data(), this->ticktime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ticktime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ticktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.MachineSystemInfo)
}

::google::protobuf::uint8* MachineSystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.MachineSystemInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machine(), target);
  }

  // optional double dCpuPercent = 2;
  if (has_dcpupercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dcpupercent(), target);
  }

  // optional double dUseMemory = 3;
  if (has_dusememory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dusememory(), target);
  }

  // optional double dTotalMemory = 4;
  if (has_dtotalmemory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dtotalmemory(), target);
  }

  // optional string tickTime = 5;
  if (has_ticktime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticktime().data(), this->ticktime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ticktime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ticktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.MachineSystemInfo)
  return target;
}

int MachineSystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .machine.MachineHead machine = 1;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine());
    }

    // optional double dCpuPercent = 2;
    if (has_dcpupercent()) {
      total_size += 1 + 8;
    }

    // optional double dUseMemory = 3;
    if (has_dusememory()) {
      total_size += 1 + 8;
    }

    // optional double dTotalMemory = 4;
    if (has_dtotalmemory()) {
      total_size += 1 + 8;
    }

    // optional string tickTime = 5;
    if (has_ticktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticktime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineSystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineSystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineSystemInfo::MergeFrom(const MachineSystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine()) {
      mutable_machine()->::machine::MachineHead::MergeFrom(from.machine());
    }
    if (from.has_dcpupercent()) {
      set_dcpupercent(from.dcpupercent());
    }
    if (from.has_dusememory()) {
      set_dusememory(from.dusememory());
    }
    if (from.has_dtotalmemory()) {
      set_dtotalmemory(from.dtotalmemory());
    }
    if (from.has_ticktime()) {
      set_ticktime(from.ticktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineSystemInfo::CopyFrom(const MachineSystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineSystemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_machine()) {
    if (!this->machine().IsInitialized()) return false;
  }
  return true;
}

void MachineSystemInfo::Swap(MachineSystemInfo* other) {
  if (other != this) {
    std::swap(machine_, other->machine_);
    std::swap(dcpupercent_, other->dcpupercent_);
    std::swap(dusememory_, other->dusememory_);
    std::swap(dtotalmemory_, other->dtotalmemory_);
    std::swap(ticktime_, other->ticktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineSystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineSystemInfo_descriptor_;
  metadata.reflection = MachineSystemInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace machine

// @@protoc_insertion_point(global_scope)
