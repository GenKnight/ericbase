// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RtnProcessLogInfo.proto

#ifndef PROTOBUF_RtnProcessLogInfo_2eproto__INCLUDED
#define PROTOBUF_RtnProcessLogInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "basehead.pb.h"
// @@protoc_insertion_point(includes)

namespace machine {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RtnProcessLogInfo_2eproto();
void protobuf_AssignDesc_RtnProcessLogInfo_2eproto();
void protobuf_ShutdownFile_RtnProcessLogInfo_2eproto();

class ProcessLogInfo;

// ===================================================================

class ProcessLogInfo : public ::google::protobuf::Message {
 public:
  ProcessLogInfo();
  virtual ~ProcessLogInfo();

  ProcessLogInfo(const ProcessLogInfo& from);

  inline ProcessLogInfo& operator=(const ProcessLogInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessLogInfo& default_instance();

  void Swap(ProcessLogInfo* other);

  // implements Message ----------------------------------------------

  ProcessLogInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessLogInfo& from);
  void MergeFrom(const ProcessLogInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .machine.MachineHead machine = 1;
  inline bool has_machine() const;
  inline void clear_machine();
  static const int kMachineFieldNumber = 1;
  inline const ::machine::MachineHead& machine() const;
  inline ::machine::MachineHead* mutable_machine();
  inline ::machine::MachineHead* release_machine();
  inline void set_allocated_machine(::machine::MachineHead* machine);

  // required .machine.ProcessHead process = 2;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 2;
  inline const ::machine::ProcessHead& process() const;
  inline ::machine::ProcessHead* mutable_process();
  inline ::machine::ProcessHead* release_process();
  inline void set_allocated_process(::machine::ProcessHead* process);

  // optional string userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // repeated bytes logInfo = 4;
  inline int loginfo_size() const;
  inline void clear_loginfo();
  static const int kLogInfoFieldNumber = 4;
  inline const ::std::string& loginfo(int index) const;
  inline ::std::string* mutable_loginfo(int index);
  inline void set_loginfo(int index, const ::std::string& value);
  inline void set_loginfo(int index, const char* value);
  inline void set_loginfo(int index, const void* value, size_t size);
  inline ::std::string* add_loginfo();
  inline void add_loginfo(const ::std::string& value);
  inline void add_loginfo(const char* value);
  inline void add_loginfo(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& loginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_loginfo();

  // optional int32 loglevel = 5;
  inline bool has_loglevel() const;
  inline void clear_loglevel();
  static const int kLoglevelFieldNumber = 5;
  inline ::google::protobuf::int32 loglevel() const;
  inline void set_loglevel(::google::protobuf::int32 value);

  // optional string tickTime = 6;
  inline bool has_ticktime() const;
  inline void clear_ticktime();
  static const int kTickTimeFieldNumber = 6;
  inline const ::std::string& ticktime() const;
  inline void set_ticktime(const ::std::string& value);
  inline void set_ticktime(const char* value);
  inline void set_ticktime(const char* value, size_t size);
  inline ::std::string* mutable_ticktime();
  inline ::std::string* release_ticktime();
  inline void set_allocated_ticktime(::std::string* ticktime);

  // @@protoc_insertion_point(class_scope:machine.ProcessLogInfo)
 private:
  inline void set_has_machine();
  inline void clear_has_machine();
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_loglevel();
  inline void clear_has_loglevel();
  inline void set_has_ticktime();
  inline void clear_has_ticktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::machine::MachineHead* machine_;
  ::machine::ProcessHead* process_;
  ::std::string* userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> loginfo_;
  ::std::string* ticktime_;
  ::google::protobuf::int32 loglevel_;
  friend void  protobuf_AddDesc_RtnProcessLogInfo_2eproto();
  friend void protobuf_AssignDesc_RtnProcessLogInfo_2eproto();
  friend void protobuf_ShutdownFile_RtnProcessLogInfo_2eproto();

  void InitAsDefaultInstance();
  static ProcessLogInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ProcessLogInfo

// required .machine.MachineHead machine = 1;
inline bool ProcessLogInfo::has_machine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessLogInfo::set_has_machine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessLogInfo::clear_has_machine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessLogInfo::clear_machine() {
  if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
  clear_has_machine();
}
inline const ::machine::MachineHead& ProcessLogInfo::machine() const {
  // @@protoc_insertion_point(field_get:machine.ProcessLogInfo.machine)
  return machine_ != NULL ? *machine_ : *default_instance_->machine_;
}
inline ::machine::MachineHead* ProcessLogInfo::mutable_machine() {
  set_has_machine();
  if (machine_ == NULL) machine_ = new ::machine::MachineHead;
  // @@protoc_insertion_point(field_mutable:machine.ProcessLogInfo.machine)
  return machine_;
}
inline ::machine::MachineHead* ProcessLogInfo::release_machine() {
  clear_has_machine();
  ::machine::MachineHead* temp = machine_;
  machine_ = NULL;
  return temp;
}
inline void ProcessLogInfo::set_allocated_machine(::machine::MachineHead* machine) {
  delete machine_;
  machine_ = machine;
  if (machine) {
    set_has_machine();
  } else {
    clear_has_machine();
  }
  // @@protoc_insertion_point(field_set_allocated:machine.ProcessLogInfo.machine)
}

// required .machine.ProcessHead process = 2;
inline bool ProcessLogInfo::has_process() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessLogInfo::set_has_process() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessLogInfo::clear_has_process() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessLogInfo::clear_process() {
  if (process_ != NULL) process_->::machine::ProcessHead::Clear();
  clear_has_process();
}
inline const ::machine::ProcessHead& ProcessLogInfo::process() const {
  // @@protoc_insertion_point(field_get:machine.ProcessLogInfo.process)
  return process_ != NULL ? *process_ : *default_instance_->process_;
}
inline ::machine::ProcessHead* ProcessLogInfo::mutable_process() {
  set_has_process();
  if (process_ == NULL) process_ = new ::machine::ProcessHead;
  // @@protoc_insertion_point(field_mutable:machine.ProcessLogInfo.process)
  return process_;
}
inline ::machine::ProcessHead* ProcessLogInfo::release_process() {
  clear_has_process();
  ::machine::ProcessHead* temp = process_;
  process_ = NULL;
  return temp;
}
inline void ProcessLogInfo::set_allocated_process(::machine::ProcessHead* process) {
  delete process_;
  process_ = process;
  if (process) {
    set_has_process();
  } else {
    clear_has_process();
  }
  // @@protoc_insertion_point(field_set_allocated:machine.ProcessLogInfo.process)
}

// optional string userid = 3;
inline bool ProcessLogInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessLogInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessLogInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessLogInfo::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& ProcessLogInfo::userid() const {
  // @@protoc_insertion_point(field_get:machine.ProcessLogInfo.userid)
  return *userid_;
}
inline void ProcessLogInfo::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:machine.ProcessLogInfo.userid)
}
inline void ProcessLogInfo::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:machine.ProcessLogInfo.userid)
}
inline void ProcessLogInfo::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machine.ProcessLogInfo.userid)
}
inline ::std::string* ProcessLogInfo::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machine.ProcessLogInfo.userid)
  return userid_;
}
inline ::std::string* ProcessLogInfo::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProcessLogInfo::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machine.ProcessLogInfo.userid)
}

// repeated bytes logInfo = 4;
inline int ProcessLogInfo::loginfo_size() const {
  return loginfo_.size();
}
inline void ProcessLogInfo::clear_loginfo() {
  loginfo_.Clear();
}
inline const ::std::string& ProcessLogInfo::loginfo(int index) const {
  // @@protoc_insertion_point(field_get:machine.ProcessLogInfo.logInfo)
  return loginfo_.Get(index);
}
inline ::std::string* ProcessLogInfo::mutable_loginfo(int index) {
  // @@protoc_insertion_point(field_mutable:machine.ProcessLogInfo.logInfo)
  return loginfo_.Mutable(index);
}
inline void ProcessLogInfo::set_loginfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:machine.ProcessLogInfo.logInfo)
  loginfo_.Mutable(index)->assign(value);
}
inline void ProcessLogInfo::set_loginfo(int index, const char* value) {
  loginfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:machine.ProcessLogInfo.logInfo)
}
inline void ProcessLogInfo::set_loginfo(int index, const void* value, size_t size) {
  loginfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machine.ProcessLogInfo.logInfo)
}
inline ::std::string* ProcessLogInfo::add_loginfo() {
  return loginfo_.Add();
}
inline void ProcessLogInfo::add_loginfo(const ::std::string& value) {
  loginfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:machine.ProcessLogInfo.logInfo)
}
inline void ProcessLogInfo::add_loginfo(const char* value) {
  loginfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:machine.ProcessLogInfo.logInfo)
}
inline void ProcessLogInfo::add_loginfo(const void* value, size_t size) {
  loginfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:machine.ProcessLogInfo.logInfo)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessLogInfo::loginfo() const {
  // @@protoc_insertion_point(field_list:machine.ProcessLogInfo.logInfo)
  return loginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessLogInfo::mutable_loginfo() {
  // @@protoc_insertion_point(field_mutable_list:machine.ProcessLogInfo.logInfo)
  return &loginfo_;
}

// optional int32 loglevel = 5;
inline bool ProcessLogInfo::has_loglevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessLogInfo::set_has_loglevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProcessLogInfo::clear_has_loglevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProcessLogInfo::clear_loglevel() {
  loglevel_ = 0;
  clear_has_loglevel();
}
inline ::google::protobuf::int32 ProcessLogInfo::loglevel() const {
  // @@protoc_insertion_point(field_get:machine.ProcessLogInfo.loglevel)
  return loglevel_;
}
inline void ProcessLogInfo::set_loglevel(::google::protobuf::int32 value) {
  set_has_loglevel();
  loglevel_ = value;
  // @@protoc_insertion_point(field_set:machine.ProcessLogInfo.loglevel)
}

// optional string tickTime = 6;
inline bool ProcessLogInfo::has_ticktime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcessLogInfo::set_has_ticktime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProcessLogInfo::clear_has_ticktime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProcessLogInfo::clear_ticktime() {
  if (ticktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_->clear();
  }
  clear_has_ticktime();
}
inline const ::std::string& ProcessLogInfo::ticktime() const {
  // @@protoc_insertion_point(field_get:machine.ProcessLogInfo.tickTime)
  return *ticktime_;
}
inline void ProcessLogInfo::set_ticktime(const ::std::string& value) {
  set_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_ = new ::std::string;
  }
  ticktime_->assign(value);
  // @@protoc_insertion_point(field_set:machine.ProcessLogInfo.tickTime)
}
inline void ProcessLogInfo::set_ticktime(const char* value) {
  set_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_ = new ::std::string;
  }
  ticktime_->assign(value);
  // @@protoc_insertion_point(field_set_char:machine.ProcessLogInfo.tickTime)
}
inline void ProcessLogInfo::set_ticktime(const char* value, size_t size) {
  set_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_ = new ::std::string;
  }
  ticktime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machine.ProcessLogInfo.tickTime)
}
inline ::std::string* ProcessLogInfo::mutable_ticktime() {
  set_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ticktime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machine.ProcessLogInfo.tickTime)
  return ticktime_;
}
inline ::std::string* ProcessLogInfo::release_ticktime() {
  clear_has_ticktime();
  if (ticktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ticktime_;
    ticktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProcessLogInfo::set_allocated_ticktime(::std::string* ticktime) {
  if (ticktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ticktime_;
  }
  if (ticktime) {
    set_has_ticktime();
    ticktime_ = ticktime;
  } else {
    clear_has_ticktime();
    ticktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machine.ProcessLogInfo.tickTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace machine

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RtnProcessLogInfo_2eproto__INCLUDED
