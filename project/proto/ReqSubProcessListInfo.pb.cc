// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReqSubProcessListInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ReqSubProcessListInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace machine {

namespace {

const ::google::protobuf::Descriptor* ReqSubProcessListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSubProcessListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspSubProcessListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspSubProcessListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ReqSubProcessListInfo_2eproto() {
  protobuf_AddDesc_ReqSubProcessListInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ReqSubProcessListInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ReqSubProcessListInfo_descriptor_ = file->message_type(0);
  static const int ReqSubProcessListInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubProcessListInfo, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubProcessListInfo, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubProcessListInfo, userid_),
  };
  ReqSubProcessListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSubProcessListInfo_descriptor_,
      ReqSubProcessListInfo::default_instance_,
      ReqSubProcessListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubProcessListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubProcessListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSubProcessListInfo));
  RspSubProcessListInfo_descriptor_ = file->message_type(1);
  static const int RspSubProcessListInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubProcessListInfo, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubProcessListInfo, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubProcessListInfo, userid_),
  };
  RspSubProcessListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspSubProcessListInfo_descriptor_,
      RspSubProcessListInfo::default_instance_,
      RspSubProcessListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubProcessListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspSubProcessListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspSubProcessListInfo));
  ProcessValue_descriptor_ = file->message_type(2);
  static const int ProcessValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessValue, dprocesscpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessValue, dprocessusemem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessValue, npid_),
  };
  ProcessValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessValue_descriptor_,
      ProcessValue::default_instance_,
      ProcessValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessValue));
  ProcessInfo_descriptor_ = file->message_type(3);
  static const int ProcessInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, process_is_run_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, dprocesscounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, ticktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, value_),
  };
  ProcessInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessInfo_descriptor_,
      ProcessInfo::default_instance_,
      ProcessInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ReqSubProcessListInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSubProcessListInfo_descriptor_, &ReqSubProcessListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspSubProcessListInfo_descriptor_, &RspSubProcessListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessValue_descriptor_, &ProcessValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessInfo_descriptor_, &ProcessInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ReqSubProcessListInfo_2eproto() {
  delete ReqSubProcessListInfo::default_instance_;
  delete ReqSubProcessListInfo_reflection_;
  delete RspSubProcessListInfo::default_instance_;
  delete RspSubProcessListInfo_reflection_;
  delete ProcessValue::default_instance_;
  delete ProcessValue_reflection_;
  delete ProcessInfo::default_instance_;
  delete ProcessInfo_reflection_;
}

void protobuf_AddDesc_ReqSubProcessListInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::machine::protobuf_AddDesc_basehead_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033ReqSubProcessListInfo.proto\022\007machine\032\016"
    "basehead.proto\"u\n\025ReqSubProcessListInfo\022"
    "%\n\007machine\030\001 \002(\0132\024.machine.MachineHead\022%"
    "\n\007process\030\002 \003(\0132\024.machine.ProcessHead\022\016\n"
    "\006userID\030\003 \002(\t\"u\n\025RspSubProcessListInfo\022%"
    "\n\007machine\030\001 \002(\0132\024.machine.MachineHead\022%\n"
    "\007process\030\002 \003(\0132\024.machine.ProcessHead\022\016\n\006"
    "userID\030\003 \002(\t\"I\n\014ProcessValue\022\023\n\013dProcess"
    "Cpu\030\001 \001(\001\022\026\n\016dProcessUseMem\030\002 \001(\001\022\014\n\004nPi"
    "d\030\003 \001(\003\"\303\001\n\013ProcessInfo\022%\n\007machine\030\001 \002(\013"
    "2\024.machine.MachineHead\022%\n\007process\030\002 \002(\0132"
    "\024.machine.ProcessHead\022\026\n\016process_is_run\030"
    "\003 \002(\005\022\026\n\016dProcesscounts\030\004 \001(\001\022\020\n\010tickTim"
    "e\030\005 \001(\t\022$\n\005value\030\006 \003(\0132\025.machine.Process"
    "Value", 565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ReqSubProcessListInfo.proto", &protobuf_RegisterTypes);
  ReqSubProcessListInfo::default_instance_ = new ReqSubProcessListInfo();
  RspSubProcessListInfo::default_instance_ = new RspSubProcessListInfo();
  ProcessValue::default_instance_ = new ProcessValue();
  ProcessInfo::default_instance_ = new ProcessInfo();
  ReqSubProcessListInfo::default_instance_->InitAsDefaultInstance();
  RspSubProcessListInfo::default_instance_->InitAsDefaultInstance();
  ProcessValue::default_instance_->InitAsDefaultInstance();
  ProcessInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ReqSubProcessListInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ReqSubProcessListInfo_2eproto {
  StaticDescriptorInitializer_ReqSubProcessListInfo_2eproto() {
    protobuf_AddDesc_ReqSubProcessListInfo_2eproto();
  }
} static_descriptor_initializer_ReqSubProcessListInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqSubProcessListInfo::kMachineFieldNumber;
const int ReqSubProcessListInfo::kProcessFieldNumber;
const int ReqSubProcessListInfo::kUserIDFieldNumber;
#endif  // !_MSC_VER

ReqSubProcessListInfo::ReqSubProcessListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.ReqSubProcessListInfo)
}

void ReqSubProcessListInfo::InitAsDefaultInstance() {
  machine_ = const_cast< ::machine::MachineHead*>(&::machine::MachineHead::default_instance());
}

ReqSubProcessListInfo::ReqSubProcessListInfo(const ReqSubProcessListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:machine.ReqSubProcessListInfo)
}

void ReqSubProcessListInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  machine_ = NULL;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSubProcessListInfo::~ReqSubProcessListInfo() {
  // @@protoc_insertion_point(destructor:machine.ReqSubProcessListInfo)
  SharedDtor();
}

void ReqSubProcessListInfo::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete machine_;
  }
}

void ReqSubProcessListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubProcessListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSubProcessListInfo_descriptor_;
}

const ReqSubProcessListInfo& ReqSubProcessListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReqSubProcessListInfo_2eproto();
  return *default_instance_;
}

ReqSubProcessListInfo* ReqSubProcessListInfo::default_instance_ = NULL;

ReqSubProcessListInfo* ReqSubProcessListInfo::New() const {
  return new ReqSubProcessListInfo;
}

void ReqSubProcessListInfo::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_machine()) {
      if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
  }
  process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSubProcessListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.ReqSubProcessListInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .machine.MachineHead machine = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_process;
        break;
      }

      // repeated .machine.ProcessHead process = 2;
      case 2: {
        if (tag == 18) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_process;
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // required string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.ReqSubProcessListInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.ReqSubProcessListInfo)
  return false;
#undef DO_
}

void ReqSubProcessListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.ReqSubProcessListInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machine(), output);
  }

  // repeated .machine.ProcessHead process = 2;
  for (int i = 0; i < this->process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->process(i), output);
  }

  // required string userID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.ReqSubProcessListInfo)
}

::google::protobuf::uint8* ReqSubProcessListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.ReqSubProcessListInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machine(), target);
  }

  // repeated .machine.ProcessHead process = 2;
  for (int i = 0; i < this->process_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->process(i), target);
  }

  // required string userID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.ReqSubProcessListInfo)
  return target;
}

int ReqSubProcessListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .machine.MachineHead machine = 1;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine());
    }

    // required string userID = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  // repeated .machine.ProcessHead process = 2;
  total_size += 1 * this->process_size();
  for (int i = 0; i < this->process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->process(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubProcessListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSubProcessListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSubProcessListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSubProcessListInfo::MergeFrom(const ReqSubProcessListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  process_.MergeFrom(from.process_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine()) {
      mutable_machine()->::machine::MachineHead::MergeFrom(from.machine());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSubProcessListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubProcessListInfo::CopyFrom(const ReqSubProcessListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubProcessListInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_machine()) {
    if (!this->machine().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->process())) return false;
  return true;
}

void ReqSubProcessListInfo::Swap(ReqSubProcessListInfo* other) {
  if (other != this) {
    std::swap(machine_, other->machine_);
    process_.Swap(&other->process_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSubProcessListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSubProcessListInfo_descriptor_;
  metadata.reflection = ReqSubProcessListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspSubProcessListInfo::kMachineFieldNumber;
const int RspSubProcessListInfo::kProcessFieldNumber;
const int RspSubProcessListInfo::kUserIDFieldNumber;
#endif  // !_MSC_VER

RspSubProcessListInfo::RspSubProcessListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.RspSubProcessListInfo)
}

void RspSubProcessListInfo::InitAsDefaultInstance() {
  machine_ = const_cast< ::machine::MachineHead*>(&::machine::MachineHead::default_instance());
}

RspSubProcessListInfo::RspSubProcessListInfo(const RspSubProcessListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:machine.RspSubProcessListInfo)
}

void RspSubProcessListInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  machine_ = NULL;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspSubProcessListInfo::~RspSubProcessListInfo() {
  // @@protoc_insertion_point(destructor:machine.RspSubProcessListInfo)
  SharedDtor();
}

void RspSubProcessListInfo::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete machine_;
  }
}

void RspSubProcessListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspSubProcessListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspSubProcessListInfo_descriptor_;
}

const RspSubProcessListInfo& RspSubProcessListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReqSubProcessListInfo_2eproto();
  return *default_instance_;
}

RspSubProcessListInfo* RspSubProcessListInfo::default_instance_ = NULL;

RspSubProcessListInfo* RspSubProcessListInfo::New() const {
  return new RspSubProcessListInfo;
}

void RspSubProcessListInfo::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_machine()) {
      if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
  }
  process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspSubProcessListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.RspSubProcessListInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .machine.MachineHead machine = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_process;
        break;
      }

      // repeated .machine.ProcessHead process = 2;
      case 2: {
        if (tag == 18) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_process;
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // required string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.RspSubProcessListInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.RspSubProcessListInfo)
  return false;
#undef DO_
}

void RspSubProcessListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.RspSubProcessListInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machine(), output);
  }

  // repeated .machine.ProcessHead process = 2;
  for (int i = 0; i < this->process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->process(i), output);
  }

  // required string userID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.RspSubProcessListInfo)
}

::google::protobuf::uint8* RspSubProcessListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.RspSubProcessListInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machine(), target);
  }

  // repeated .machine.ProcessHead process = 2;
  for (int i = 0; i < this->process_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->process(i), target);
  }

  // required string userID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.RspSubProcessListInfo)
  return target;
}

int RspSubProcessListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .machine.MachineHead machine = 1;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine());
    }

    // required string userID = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  // repeated .machine.ProcessHead process = 2;
  total_size += 1 * this->process_size();
  for (int i = 0; i < this->process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->process(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspSubProcessListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspSubProcessListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspSubProcessListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspSubProcessListInfo::MergeFrom(const RspSubProcessListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  process_.MergeFrom(from.process_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine()) {
      mutable_machine()->::machine::MachineHead::MergeFrom(from.machine());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspSubProcessListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspSubProcessListInfo::CopyFrom(const RspSubProcessListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspSubProcessListInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_machine()) {
    if (!this->machine().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->process())) return false;
  return true;
}

void RspSubProcessListInfo::Swap(RspSubProcessListInfo* other) {
  if (other != this) {
    std::swap(machine_, other->machine_);
    process_.Swap(&other->process_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspSubProcessListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspSubProcessListInfo_descriptor_;
  metadata.reflection = RspSubProcessListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessValue::kDProcessCpuFieldNumber;
const int ProcessValue::kDProcessUseMemFieldNumber;
const int ProcessValue::kNPidFieldNumber;
#endif  // !_MSC_VER

ProcessValue::ProcessValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.ProcessValue)
}

void ProcessValue::InitAsDefaultInstance() {
}

ProcessValue::ProcessValue(const ProcessValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:machine.ProcessValue)
}

void ProcessValue::SharedCtor() {
  _cached_size_ = 0;
  dprocesscpu_ = 0;
  dprocessusemem_ = 0;
  npid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessValue::~ProcessValue() {
  // @@protoc_insertion_point(destructor:machine.ProcessValue)
  SharedDtor();
}

void ProcessValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessValue_descriptor_;
}

const ProcessValue& ProcessValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReqSubProcessListInfo_2eproto();
  return *default_instance_;
}

ProcessValue* ProcessValue::default_instance_ = NULL;

ProcessValue* ProcessValue::New() const {
  return new ProcessValue;
}

void ProcessValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProcessValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dprocesscpu_, npid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.ProcessValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dProcessCpu = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dprocesscpu_)));
          set_has_dprocesscpu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_dProcessUseMem;
        break;
      }

      // optional double dProcessUseMem = 2;
      case 2: {
        if (tag == 17) {
         parse_dProcessUseMem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dprocessusemem_)));
          set_has_dprocessusemem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nPid;
        break;
      }

      // optional int64 nPid = 3;
      case 3: {
        if (tag == 24) {
         parse_nPid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.ProcessValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.ProcessValue)
  return false;
#undef DO_
}

void ProcessValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.ProcessValue)
  // optional double dProcessCpu = 1;
  if (has_dprocesscpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dprocesscpu(), output);
  }

  // optional double dProcessUseMem = 2;
  if (has_dprocessusemem()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dprocessusemem(), output);
  }

  // optional int64 nPid = 3;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->npid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.ProcessValue)
}

::google::protobuf::uint8* ProcessValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.ProcessValue)
  // optional double dProcessCpu = 1;
  if (has_dprocesscpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dprocesscpu(), target);
  }

  // optional double dProcessUseMem = 2;
  if (has_dprocessusemem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dprocessusemem(), target);
  }

  // optional int64 nPid = 3;
  if (has_npid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->npid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.ProcessValue)
  return target;
}

int ProcessValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double dProcessCpu = 1;
    if (has_dprocesscpu()) {
      total_size += 1 + 8;
    }

    // optional double dProcessUseMem = 2;
    if (has_dprocessusemem()) {
      total_size += 1 + 8;
    }

    // optional int64 nPid = 3;
    if (has_npid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->npid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessValue::MergeFrom(const ProcessValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dprocesscpu()) {
      set_dprocesscpu(from.dprocesscpu());
    }
    if (from.has_dprocessusemem()) {
      set_dprocessusemem(from.dprocessusemem());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessValue::CopyFrom(const ProcessValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessValue::IsInitialized() const {

  return true;
}

void ProcessValue::Swap(ProcessValue* other) {
  if (other != this) {
    std::swap(dprocesscpu_, other->dprocesscpu_);
    std::swap(dprocessusemem_, other->dprocessusemem_);
    std::swap(npid_, other->npid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessValue_descriptor_;
  metadata.reflection = ProcessValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessInfo::kMachineFieldNumber;
const int ProcessInfo::kProcessFieldNumber;
const int ProcessInfo::kProcessIsRunFieldNumber;
const int ProcessInfo::kDProcesscountsFieldNumber;
const int ProcessInfo::kTickTimeFieldNumber;
const int ProcessInfo::kValueFieldNumber;
#endif  // !_MSC_VER

ProcessInfo::ProcessInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.ProcessInfo)
}

void ProcessInfo::InitAsDefaultInstance() {
  machine_ = const_cast< ::machine::MachineHead*>(&::machine::MachineHead::default_instance());
  process_ = const_cast< ::machine::ProcessHead*>(&::machine::ProcessHead::default_instance());
}

ProcessInfo::ProcessInfo(const ProcessInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:machine.ProcessInfo)
}

void ProcessInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  machine_ = NULL;
  process_ = NULL;
  process_is_run_ = 0;
  dprocesscounts_ = 0;
  ticktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessInfo::~ProcessInfo() {
  // @@protoc_insertion_point(destructor:machine.ProcessInfo)
  SharedDtor();
}

void ProcessInfo::SharedDtor() {
  if (ticktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ticktime_;
  }
  if (this != default_instance_) {
    delete machine_;
    delete process_;
  }
}

void ProcessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessInfo_descriptor_;
}

const ProcessInfo& ProcessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReqSubProcessListInfo_2eproto();
  return *default_instance_;
}

ProcessInfo* ProcessInfo::default_instance_ = NULL;

ProcessInfo* ProcessInfo::New() const {
  return new ProcessInfo;
}

void ProcessInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_machine()) {
      if (machine_ != NULL) machine_->::machine::MachineHead::Clear();
    }
    if (has_process()) {
      if (process_ != NULL) process_->::machine::ProcessHead::Clear();
    }
    process_is_run_ = 0;
    dprocesscounts_ = 0;
    if (has_ticktime()) {
      if (ticktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ticktime_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.ProcessInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .machine.MachineHead machine = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_process;
        break;
      }

      // required .machine.ProcessHead process = 2;
      case 2: {
        if (tag == 18) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_process_is_run;
        break;
      }

      // required int32 process_is_run = 3;
      case 3: {
        if (tag == 24) {
         parse_process_is_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_is_run_)));
          set_has_process_is_run();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_dProcesscounts;
        break;
      }

      // optional double dProcesscounts = 4;
      case 4: {
        if (tag == 33) {
         parse_dProcesscounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dprocesscounts_)));
          set_has_dprocesscounts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tickTime;
        break;
      }

      // optional string tickTime = 5;
      case 5: {
        if (tag == 42) {
         parse_tickTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticktime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticktime().data(), this->ticktime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ticktime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_value;
        break;
      }

      // repeated .machine.ProcessValue value = 6;
      case 6: {
        if (tag == 50) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.ProcessInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.ProcessInfo)
  return false;
#undef DO_
}

void ProcessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.ProcessInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machine(), output);
  }

  // required .machine.ProcessHead process = 2;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->process(), output);
  }

  // required int32 process_is_run = 3;
  if (has_process_is_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->process_is_run(), output);
  }

  // optional double dProcesscounts = 4;
  if (has_dprocesscounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dprocesscounts(), output);
  }

  // optional string tickTime = 5;
  if (has_ticktime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticktime().data(), this->ticktime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ticktime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ticktime(), output);
  }

  // repeated .machine.ProcessValue value = 6;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.ProcessInfo)
}

::google::protobuf::uint8* ProcessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.ProcessInfo)
  // required .machine.MachineHead machine = 1;
  if (has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machine(), target);
  }

  // required .machine.ProcessHead process = 2;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->process(), target);
  }

  // required int32 process_is_run = 3;
  if (has_process_is_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->process_is_run(), target);
  }

  // optional double dProcesscounts = 4;
  if (has_dprocesscounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dprocesscounts(), target);
  }

  // optional string tickTime = 5;
  if (has_ticktime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticktime().data(), this->ticktime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ticktime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ticktime(), target);
  }

  // repeated .machine.ProcessValue value = 6;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.ProcessInfo)
  return target;
}

int ProcessInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .machine.MachineHead machine = 1;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine());
    }

    // required .machine.ProcessHead process = 2;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->process());
    }

    // required int32 process_is_run = 3;
    if (has_process_is_run()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_is_run());
    }

    // optional double dProcesscounts = 4;
    if (has_dprocesscounts()) {
      total_size += 1 + 8;
    }

    // optional string tickTime = 5;
    if (has_ticktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticktime());
    }

  }
  // repeated .machine.ProcessValue value = 6;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessInfo::MergeFrom(const ProcessInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine()) {
      mutable_machine()->::machine::MachineHead::MergeFrom(from.machine());
    }
    if (from.has_process()) {
      mutable_process()->::machine::ProcessHead::MergeFrom(from.process());
    }
    if (from.has_process_is_run()) {
      set_process_is_run(from.process_is_run());
    }
    if (from.has_dprocesscounts()) {
      set_dprocesscounts(from.dprocesscounts());
    }
    if (from.has_ticktime()) {
      set_ticktime(from.ticktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfo::CopyFrom(const ProcessInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_machine()) {
    if (!this->machine().IsInitialized()) return false;
  }
  if (has_process()) {
    if (!this->process().IsInitialized()) return false;
  }
  return true;
}

void ProcessInfo::Swap(ProcessInfo* other) {
  if (other != this) {
    std::swap(machine_, other->machine_);
    std::swap(process_, other->process_);
    std::swap(process_is_run_, other->process_is_run_);
    std::swap(dprocesscounts_, other->dprocesscounts_);
    std::swap(ticktime_, other->ticktime_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessInfo_descriptor_;
  metadata.reflection = ProcessInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace machine

// @@protoc_insertion_point(global_scope)
