// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basehead.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "basehead.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace machine {

namespace {

const ::google::protobuf::Descriptor* MachineHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessHead_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_basehead_2eproto() {
  protobuf_AddDesc_basehead_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "basehead.proto");
  GOOGLE_CHECK(file != NULL);
  MachineHead_descriptor_ = file->message_type(0);
  static const int MachineHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineHead, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineHead, mac_),
  };
  MachineHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineHead_descriptor_,
      MachineHead::default_instance_,
      MachineHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineHead));
  ProcessHead_descriptor_ = file->message_type(1);
  static const int ProcessHead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessHead, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessHead, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessHead, processlogpath_),
  };
  ProcessHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessHead_descriptor_,
      ProcessHead::default_instance_,
      ProcessHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessHead));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_basehead_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineHead_descriptor_, &MachineHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessHead_descriptor_, &ProcessHead::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_basehead_2eproto() {
  delete MachineHead::default_instance_;
  delete MachineHead_reflection_;
  delete ProcessHead::default_instance_;
  delete ProcessHead_reflection_;
}

void protobuf_AddDesc_basehead_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016basehead.proto\022\007machine\"&\n\013MachineHead"
    "\022\n\n\002ip\030\001 \002(\t\022\013\n\003mac\030\002 \001(\014\"M\n\013ProcessHead"
    "\022\023\n\013processName\030\001 \002(\t\022\021\n\tprocessID\030\002 \001(\003"
    "\022\026\n\016processlogPath\030\003 \001(\t", 144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "basehead.proto", &protobuf_RegisterTypes);
  MachineHead::default_instance_ = new MachineHead();
  ProcessHead::default_instance_ = new ProcessHead();
  MachineHead::default_instance_->InitAsDefaultInstance();
  ProcessHead::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_basehead_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_basehead_2eproto {
  StaticDescriptorInitializer_basehead_2eproto() {
    protobuf_AddDesc_basehead_2eproto();
  }
} static_descriptor_initializer_basehead_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MachineHead::kIpFieldNumber;
const int MachineHead::kMacFieldNumber;
#endif  // !_MSC_VER

MachineHead::MachineHead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.MachineHead)
}

void MachineHead::InitAsDefaultInstance() {
}

MachineHead::MachineHead(const MachineHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:machine.MachineHead)
}

void MachineHead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineHead::~MachineHead() {
  // @@protoc_insertion_point(destructor:machine.MachineHead)
  SharedDtor();
}

void MachineHead::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void MachineHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineHead_descriptor_;
}

const MachineHead& MachineHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_basehead_2eproto();
  return *default_instance_;
}

MachineHead* MachineHead::default_instance_ = NULL;

MachineHead* MachineHead::New() const {
  return new MachineHead;
}

void MachineHead::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.MachineHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mac;
        break;
      }

      // optional bytes mac = 2;
      case 2: {
        if (tag == 18) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.MachineHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.MachineHead)
  return false;
#undef DO_
}

void MachineHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.MachineHead)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional bytes mac = 2;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.MachineHead)
}

::google::protobuf::uint8* MachineHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.MachineHead)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional bytes mac = 2;
  if (has_mac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.MachineHead)
  return target;
}

int MachineHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional bytes mac = 2;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineHead::MergeFrom(const MachineHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineHead::CopyFrom(const MachineHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MachineHead::Swap(MachineHead* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineHead_descriptor_;
  metadata.reflection = MachineHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessHead::kProcessNameFieldNumber;
const int ProcessHead::kProcessIDFieldNumber;
const int ProcessHead::kProcesslogPathFieldNumber;
#endif  // !_MSC_VER

ProcessHead::ProcessHead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.ProcessHead)
}

void ProcessHead::InitAsDefaultInstance() {
}

ProcessHead::ProcessHead(const ProcessHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:machine.ProcessHead)
}

void ProcessHead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  processname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processid_ = GOOGLE_LONGLONG(0);
  processlogpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessHead::~ProcessHead() {
  // @@protoc_insertion_point(destructor:machine.ProcessHead)
  SharedDtor();
}

void ProcessHead::SharedDtor() {
  if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processname_;
  }
  if (processlogpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processlogpath_;
  }
  if (this != default_instance_) {
  }
}

void ProcessHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessHead_descriptor_;
}

const ProcessHead& ProcessHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_basehead_2eproto();
  return *default_instance_;
}

ProcessHead* ProcessHead::default_instance_ = NULL;

ProcessHead* ProcessHead::New() const {
  return new ProcessHead;
}

void ProcessHead::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_processname()) {
      if (processname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        processname_->clear();
      }
    }
    processid_ = GOOGLE_LONGLONG(0);
    if (has_processlogpath()) {
      if (processlogpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        processlogpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.ProcessHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string processName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processID;
        break;
      }

      // optional int64 processID = 2;
      case 2: {
        if (tag == 16) {
         parse_processID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_processlogPath;
        break;
      }

      // optional string processlogPath = 3;
      case 3: {
        if (tag == 26) {
         parse_processlogPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processlogpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processlogpath().data(), this->processlogpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processlogpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.ProcessHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.ProcessHead)
  return false;
#undef DO_
}

void ProcessHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.ProcessHead)
  // required string processName = 1;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->processname(), output);
  }

  // optional int64 processID = 2;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processid(), output);
  }

  // optional string processlogPath = 3;
  if (has_processlogpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processlogpath().data(), this->processlogpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processlogpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->processlogpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.ProcessHead)
}

::google::protobuf::uint8* ProcessHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.ProcessHead)
  // required string processName = 1;
  if (has_processname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->processname(), target);
  }

  // optional int64 processID = 2;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processid(), target);
  }

  // optional string processlogPath = 3;
  if (has_processlogpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processlogpath().data(), this->processlogpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processlogpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->processlogpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.ProcessHead)
  return target;
}

int ProcessHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string processName = 1;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }

    // optional int64 processID = 2;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->processid());
    }

    // optional string processlogPath = 3;
    if (has_processlogpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processlogpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessHead::MergeFrom(const ProcessHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processname()) {
      set_processname(from.processname());
    }
    if (from.has_processid()) {
      set_processid(from.processid());
    }
    if (from.has_processlogpath()) {
      set_processlogpath(from.processlogpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessHead::CopyFrom(const ProcessHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProcessHead::Swap(ProcessHead* other) {
  if (other != this) {
    std::swap(processname_, other->processname_);
    std::swap(processid_, other->processid_);
    std::swap(processlogpath_, other->processlogpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessHead_descriptor_;
  metadata.reflection = ProcessHead_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace machine

// @@protoc_insertion_point(global_scope)
